/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { GraphQLContextType } from "./../../types/module"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  StoreGuestbookInput: { // input type
    body: string; // String!
    private: boolean; // Boolean!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  FreeTemplate: { // root type
    created_at?: string | null; // String
    description?: string | null; // String
    id?: number | null; // Int
    image?: string | null; // String
    slug?: string | null; // String
    source?: string | null; // String
    title?: string | null; // String
    updated_at?: string | null; // String
  }
  FreeTemplateQueryResponseType: { // root type
    data?: Array<NexusGenRootTypes['FreeTemplate'] | null> | null; // [FreeTemplate]
    nextPage?: number | null; // Int
    total?: number | null; // Int
    totalPage?: number | null; // Int
  }
  Guestbook: { // root type
    body?: string | null; // String
    created_at?: string | null; // String
    email?: string | null; // String
    image?: string | null; // String
    key: string; // ID!
    name?: string | null; // String
    private?: boolean | null; // Boolean
  }
  Mutation: {};
  PaginatedResponse: { // root type
    nextPage?: number | null; // Int
    prevPage?: number | null; // Int
    total?: number | null; // Int
    totalPage?: number | null; // Int
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  FreeTemplate: { // field return type
    created_at: string | null; // String
    description: string | null; // String
    id: number | null; // Int
    image: string | null; // String
    slug: string | null; // String
    source: string | null; // String
    title: string | null; // String
    updated_at: string | null; // String
  }
  FreeTemplateQueryResponseType: { // field return type
    data: Array<NexusGenRootTypes['FreeTemplate'] | null> | null; // [FreeTemplate]
    nextPage: number | null; // Int
    total: number | null; // Int
    totalPage: number | null; // Int
  }
  Guestbook: { // field return type
    body: string | null; // String
    created_at: string | null; // String
    email: string | null; // String
    image: string | null; // String
    key: string; // ID!
    name: string | null; // String
    private: boolean | null; // Boolean
  }
  Mutation: { // field return type
    destroyGuestbook: boolean | null; // Boolean
    storeGuestbook: NexusGenRootTypes['Guestbook'] | null; // Guestbook
  }
  PaginatedResponse: { // field return type
    nextPage: number | null; // Int
    prevPage: number | null; // Int
    total: number | null; // Int
    totalPage: number | null; // Int
  }
  Query: { // field return type
    allFreeTemplate: NexusGenRootTypes['FreeTemplateQueryResponseType'] | null; // FreeTemplateQueryResponseType
    listGuestbook: Array<NexusGenRootTypes['Guestbook'] | null> | null; // [Guestbook]
  }
}

export interface NexusGenFieldTypeNames {
  FreeTemplate: { // field return type name
    created_at: 'String'
    description: 'String'
    id: 'Int'
    image: 'String'
    slug: 'String'
    source: 'String'
    title: 'String'
    updated_at: 'String'
  }
  FreeTemplateQueryResponseType: { // field return type name
    data: 'FreeTemplate'
    nextPage: 'Int'
    total: 'Int'
    totalPage: 'Int'
  }
  Guestbook: { // field return type name
    body: 'String'
    created_at: 'String'
    email: 'String'
    image: 'String'
    key: 'ID'
    name: 'String'
    private: 'Boolean'
  }
  Mutation: { // field return type name
    destroyGuestbook: 'Boolean'
    storeGuestbook: 'Guestbook'
  }
  PaginatedResponse: { // field return type name
    nextPage: 'Int'
    prevPage: 'Int'
    total: 'Int'
    totalPage: 'Int'
  }
  Query: { // field return type name
    allFreeTemplate: 'FreeTemplateQueryResponseType'
    listGuestbook: 'Guestbook'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    destroyGuestbook: { // args
      key: string; // String!
    }
    storeGuestbook: { // args
      input: NexusGenInputs['StoreGuestbookInput']; // StoreGuestbookInput!
    }
  }
  Query: {
    allFreeTemplate: { // args
      page: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: GraphQLContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}